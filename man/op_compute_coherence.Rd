% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/op_compute_coherence.R
\name{op_compute_coherence}
\alias{op_compute_coherence}
\title{Compute Cross-Wavelet Coherence for Dyadic Motion Energy Data}
\usage{
op_compute_coherence(
  data,
  dyad_id = NULL,
  region = NULL,
  person_ids = NULL,
  dyad_col = NULL,
  region_col = "region",
  person_col = "person",
  frame_col = "frame",
  motion_col = "motion_energy",
  freq_bands = list(`0.03-0.06Hz` = c(0.03125, 0.0625), `0.06-0.12Hz` = c(0.0625, 0.125),
    `0.12-0.25Hz` = c(0.125, 0.25), `0.25-0.5Hz` = c(0.25, 0.5), `0.5-1Hz` = c(0.5, 1),
    `1-2Hz` = c(1, 2), `2-4Hz` = c(2, 4)),
  start_frame = 1,
  end_frame = NULL,
  param = 8,
  nrands = 1000,
  plot_result = FALSE,
  return_raw = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{data}{A data frame containing motion energy data.}

\item{dyad_id}{Character string for the dyad to analyze. If `NULL` (default),
the function will proceed only if a single dyad is present in `data`.}

\item{region}{Character string for the body region to analyze. If `NULL`
(default), proceeds only if a single region exists for the selected dyad.}

\item{person_ids}{A vector of two character strings for the persons in the
dyad. If `NULL` (default), auto-detects the two persons.}

\item{dyad_col}{Character string for the dyad identifier column. Defaults to
"base_filename" or "dyad_id" if found.}

\item{region_col}{Character string for the region column name (default: "region").}

\item{person_col}{Character string for the person column name (default: "person").}

\item{frame_col}{Character string for the frame/time column name (default: "frame").}

\item{motion_col}{Character string for the motion energy column name (default: "motion_energy").}

\item{freq_bands}{A named list of frequency bands in **Hertz (Hz)**. Each
element is a numeric vector of length two specifying the lower and upper
frequency bound (e.g., `list("slow_rhythm" = c(0.1, 0.5))`).}

\item{start_frame}{Integer, the starting frame for analysis (default: 1).}

\item{end_frame}{Integer, the ending frame for analysis. If `NULL` (default),
uses all available frames.}

\item{param}{Numeric, the mother wavelet parameter for `biwavelet::wtc` (default: 8).}

\item{nrands}{Integer, the number of random simulations for significance
testing (default: 1000).}

\item{plot_result}{Logical, if `TRUE`, generates a plot of the wavelet coherence.}

\item{return_raw}{Logical, if `TRUE`, includes the raw `wtc` object in the output.}

\item{verbose}{Logical, if `TRUE`, prints informative messages during execution.}
}
\value{
A list containing:
\item{coherence_summary}{A data frame with `dyad_id` and coherence statistics for each frequency band.}
\item{analysis_info}{A list with metadata about the analysis.}
\item{wtc_object}{If `return_raw = TRUE`, the raw object from `biwavelet::wtc`.}
}
\description{
This function computes cross-wavelet coherence between two individuals in a dyad
using motion energy data. It is designed to be robust, CRAN-compliant, and
user-friendly, with automatic detection of parameters and dynamic calculation
of frequency bands.
}
\details{
This function is a wrapper around `biwavelet::wtc` that simplifies its
application to dyadic motion data. It includes CRAN-compliant safety checks,
such as replacing `cat()` with `message()` and safely managing graphical
parameters with `on.exit()`.

The key improvement is the dynamic calculation of frequency bands. You specify
bands in Hz, and the function identifies the corresponding indices from the
wavelet transform's scale/period results, making the analysis independent of
time series length and sampling rate.
}
\examples{
\dontrun{
# Create sample data
sample_data <- data.frame(
  frame = rep(1:100, 2),
  dyad_id = "D01",
  region = "body",
  person = rep(c("P1", "P2"), each = 100),
  motion_energy = c(rnorm(100), rnorm(100))
)

# Define frequency bands in Hz
my_bands <- list(
  "slow" = c(0.1, 0.5), # 0.1 to 0.5 Hz
  "fast" = c(0.5, 1.0)  # 0.5 to 1.0 Hz
)

# Run analysis (dyad_id and region are auto-detected)
result <- op_compute_coherence(
  data = sample_data,
  freq_bands = my_bands,
  plot_result = TRUE
)

print(result$coherence_summary)
}

}
